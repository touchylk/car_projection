# -*- coding: utf-8 -*-
from __future__ import print_function
import os
import datetime
#
# path and dataset parameter
#
LAST_STEP = 0
AX_LOW = 1.0
AX_HIGHT = 1.6

GPU = '1,0'
#VOC_PATH = '/home/e813/dataset/VOCdevkit _2007_trainval/VOC2007/ImageSets/Main/trainval.txt'

PASCAL_PATH = '/home/e813/dataset/VOCdevkit _2007_trainval/'

OUTPUT_dir = 'data/output'

LAYER_to_restore = 40
WEIGHTS_init_dir_file = '/home/e813/yolo_weights/YOLO_small.ckpt'
WEIGHTS_output_dir = '/home/e813/yolo_weights/output/yolo_oneclass_3image'
TRAIN_process_save_txt_dir = WEIGHTS_output_dir

WEIGHTS_to_restore = WEIGHTS_init_dir_file
WEIGHTS_to_save_dir = WEIGHTS_output_dir

#PASCAL_PATH = os.path.join(DATA_PATH, 'pascal_voc')
#WATER_PATH = os.path.join(DATA_PATH,'water')
WEIGHTS_file_name = 'save.ckpt-{}'.format(LAST_STEP)
CACHE_PATH = 'data/label_cache'
WERIGHTS_READ = os.path.join(WEIGHTS_output_dir,WEIGHTS_file_name)

IMAGE_dir_file = '/home/e813/dataset/VOCdevkit_2012_trainval/VOC2012/JPEGImages/2007_000129.jpg'
#'/home/e813/yolo_weights/layer/yolo_init_layer_54.ckpt'#os.path.join(OUTPUT_dir,'weights','oneclass_oneimage.ckpt-2000')#'data/output/oneclass_oneimage.ckpt-{}'.format(LAST_STEP)


#OUTPUT_DIR = os.path.join(PASCAL_PATH, 'output')

#WEIGHTS_DIR = os.path.join(PASCAL_PATH, 'weights')
#SAVE_PATH = os.path.join('data/pascal_voc','output')


#WEIGHTS_FILE = None

#WEIGHTS_FILE = os.path.join(DATA_PATH, 'weights', 'YOLO_small.ckpt')
#WEIGHTS_FILE = os.path.join(SAVE_PATH, 'save.ckpt-900')
#WEIGHTS_FILE = '/home/li/yolo_tensorflow/data/weights/save.ckpt'
if 0:
    CLASSES = ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus',
               'car', 'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse',
               'motorbike', 'person', 'pottedplant', 'sheep', 'sofa',
               'train', 'tvmonitor']
elif 0:
    CLASSES = ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus',
               'car', 'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse',
               'motorbike', 'person', 'pottedplant', 'sheep', 'sofa',
               'train', 'tvmonitor']
elif 1:
    CLASSES = ['person', 'car', 'dog', 'chair']
else:
    CLASSES = ['person']

CLASS_NUM = len(CLASSES)
if CLASS_NUM == 1:
    ONE_CLASS = True
else:
    ONE_CLASS = False

FLIPPED = True


#
# model parameter
#

IMAGE_SIZE = 448

CELL_SIZE = 7

BOXES_PER_CELL = 2

ALPHA = 0.1

DISP_CONSOLE = False

OBJECT_SCALE = 1.0
NOOBJECT_SCALE = 0.1
CLASS_SCALE = 1.0
COORD_SCALE = 5.0


#
# solver parameter
#



LEARNING_RATE = 0.001

DECAY_STEPS = 10000

DECAY_RATE = 0.1

STAIRCASE = True

BATCH_SIZE = 3

MAX_ITER = 6000

SUMMARY_ITER = 10

SAVE_ITER = 1000


#
# test parameter
#

THRESHOLD = 0.3


IOU_THRESHOLD = 0.4

"""
1,文件记录每一次训练用到了第几张图片,每一个epoch,将shuffle后的标签储存,使得每一次重新训练都能像继续训练一样
2,学习结构化保存对象的包,储存训练的每一个过程.
3,双GPU分配batch
"""